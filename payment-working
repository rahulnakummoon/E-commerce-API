// Order Success -------- woerererererererer


async orderSuccess(req: Request, res: Response): Promise<Response> {
  try {
    const user = await UserModel.findById(req.user.id);

    const cart = await CartModel.findOne({ cart_user: req.user.id }).populate('products');
    console.log("*********thuis is tesimng******", cart);
    
    if (!user || !cart) {
      logger.warn(PaymentMessage.UserCartNotFound);
      return sendErrorResponse(res, 404, PaymentMessage.UserCartNotFound);
    }

    const invoiceDir = path.join(__dirname, "../invoices");
    if (!fs.existsSync(invoiceDir)) {
      fs.mkdirSync(invoiceDir);
    }

    const pdfPath = path.join(invoiceDir, `invoice_${req.user.id}.pdf`);

    const doc = new PDFDocument();
    const writeStream = fs.createWriteStream(pdfPath);

    writeStream.on("finish", async () => {
      console.log("PDF stream finished writing");

      try {
        const emailContent = `
          <h1>Order Placed Successfully</h1>
          <p>Dear ${user.username},</p>
          <p>Thank you for your order. Please find the attached invoice for your purchase.</p>
        `;
        await sendEmail(
          user.email,
          "Your Order Invoice",
          emailContent,
          pdfPath
        );
        fs.unlinkSync(pdfPath);

        return successResponse(
          res,
          200,
          `${PaymentMessage.OrderSuccess} and invoice sent to your email`
        );
      } catch (emailError) {
        return handleError(
          res,
          "orderSuccess",
          "User",
          PaymentMessage.EmailSendingError
        );
      }
    });

    writeStream.on("error", (streamError) => {
      logger.error(PaymentMessage.PDFStreamError, streamError);
      return sendErrorResponse(res, 500, PaymentMessage.PDFStreamError);
    });

    doc.pipe(writeStream);
    doc.fontSize(25).text("Invoice", { align: "center" });
    doc.text(`Customer: ${user.username}`);
    doc.text(`Email: ${user.email}`);
    doc.moveDown();
    cart.products.forEach(async (product) => {
      const testing = await ProductModel.findById(product.product_id);

      doc.text(`Product: ${product} - Quantity: ${product.quantity}`);
    });
    doc.text(`Toal: ${cart.total_price}`);
    doc.end();

    console.log("PDF generation initiated");

    doc.on("end", () => {
      console.log("PDF document end event triggered");
    });

    doc.on("error", (pdfError) => {
      console.error("Error creating PDF:", pdfError);
      logger.error(PaymentMessage.PDFCreationError, pdfError);
      return sendErrorResponse(res, 500, PaymentMessage.PDFCreationError);
    });
  } catch (error) {
    console.error("Error processing order success:", error);
    logger.fatal(
      `${PaymentMessage.InternalServerError} while sending the invoice`
    );
    return handleError(
      res,
      "orderSuccess",
      "User",
      `${PaymentMessage.InternalServerError} while sending an invoice`
    );
  }
}


//Working Code


export class PaymentController {
  async createPaymentLink(req: Request, res: Response): Promise<Response> {
    try {
      const cartItems = await CartModel.find({ cart_user: req.user.id });

      if (!cartItems || cartItems.length === 0) {
        return res.status(404).json({ error: "Cart not found" });
      }

      const productIds = cartItems.map((cartItem) => cartItem.product_id);

      const productDetails = await ProductModel.find({
        _id: { $in: productIds },
      });

      // Map product details to a dictionary for easy lookup
      const productMap = new Map(
        productDetails.map((product) => [product._id.toString(), product])
      );

      let total = 0;
      const lineItems = cartItems.map((cartItem) => {
        const product = productMap.get(cartItem.product_id.toString());
        const quantity = cartItem.quantity;
        const unitAmount = product ? product.product_price * 100 : 0;
        total += unitAmount * quantity;

        return {
          price_data: {
            currency: "usd",
            product_data: {
              name: product ? product.product_name : "Unknown",
            },
            unit_amount: unitAmount,
          },
          quantity: quantity,
        };
      });

      const user = await UserModel.findById(req.user.id);

      const customer = await stripe.customers.create({
        name: user?.username,
      });
      const invoice = await stripe.invoices.create({
        customer: customer.id,
      });

      const session: any = await stripe.checkout.sessions.create({
        customer: customer.id,
        line_items: lineItems,
        mode: "payment",
        success_url: "http://127.0.0.1:3000/order/order-placed-successfully",
        cancel_url: "http://127.0.0.1:3000/order/error-in-payment",
        shipping_address_collection: {
          allowed_countries: ["US", "CA", "GB", "AU", "NZ", "SG", "JP"],
        },
      });

     successResponse(res, 200, "Click on Url to pay!", {
      PaymentUrl: session.url,
      SessionId: session.id,
      InvoiceId: invoice.id,
    });

    } catch (error) {
      console.error("Error creating payment link:", error);
      return res.status(500).json({ error: "Internal Server Error" });
    }
  }
}



//Cart working code

async addToCart(req: Request, res: Response): Promise<Response> {
  const { product_id, quantity } = req.body;

  const product_exist = await ProductModel.findById({ _id: product_id });

  if (!product_exist) {
    sendErrorResponse(res, 404, "Product Not Found");
    return;
  }

  const cart_details = await CartModel.findOne({ cart_user: req.user.id });

  if (!cart_details) {
    const newCart = new CartModel({
      products: [
        {
          product_id: product_exist.id,
          quantity: quantity,
          price: product_exist.product_price,
        },
      ],
      cart_user: req.user.id,
      total_price: product_exist.product_price * quantity,
    });

    await newCart.save();
    return res.status(201).json(newCart);
  } else {
    const productIndex = cart_details.products.findIndex(
      (product) =>
        product.product_id.toString() === product_exist.id.toString()
    );

    if (productIndex > -1) {
      cart_details.products[productIndex].quantity += Number(quantity);
      cart_details.products[productIndex].price += product_exist.product_price * Number(quantity);

      console.log('Pushing to the array as product exusts 1.',product_exist.product_price * Number(quantity));
      
      cart_details.total_price +=
        product_exist.product_price * Number(quantity);
    } else {
      cart_details.products.push({
        product_id: product_exist.id,
        quantity: quantity,
        price: product_exist.product_price * Number(quantity)
        
      });
      console.log('Pushing to the array as product exusts 2.',cart_details.products[productIndex].price);

      cart_details.total_price += product_exist.product_price * quantity;
    }
  }

  await cart_details.save();
  successResponse(res, 200, JSON.parse(JSON.stringify(cart_details, null, 2)));
  return;
}









//JWt-working code with run time chekc decoding....


import jwt, { JwtPayload } from "jsonwebtoken";
import UserAttributes from "../types/userType";

const secretKey: string = process.env.secret_key || "jwtsecretkey";
type Token = string;

/**
 * Interface representing attributes of a JWT Token.
 * @interface TokenPayload
 * @property {number} id - The unique identifier of the user.
 * @property {string} username - The username of the user.
 * @property {string} email - The email address of the user.
 * @property {string} role - The role of the user (customer or admin).
 */
interface TokenPayload {
  id: string;
  username: string;
  email: string;
  role: string;
}

/**
 * Generates a JWT token for the given user.
 * @param {User} user The user object for which to generate the token.
 * @returns {Token | false} Returns the generated JWT token , or false if an error occurs.
 */
function generateToken(user: UserAttributes): Token | false {
  try {
    const payload = {
      id: user.id,
      username: user.username,
      email: user.email,
      role: user.role,
    };
    return jwt.sign(payload, secretKey, { expiresIn: "24h" }) as Token;
  } catch (error) {
    console.error("Error generating token:", error);
    return false;
  }
}

/**
 * Validates a JWT token.
 * @param {Token} token The JWT token to validate.
 * @returns {TokenPayload | false} Returns the decoded payload of the token if validation , or false if an error occurs.
 */

function validateToken(token: Token): TokenPayload | false {
  try {
    const decoded = jwt.verify(token, secretKey) as JwtPayload | string;
    if (isTokenPayload(decoded)) {
      return decoded;
    } else {
      console.error("Invalid token payload structure:", decoded);
      return false;
    }
  } catch (error) {
    console.error("Error validating token:", error);
    return false;
  }
}

/**
 * To check if a decoded JWT payload matches the expected TokenPayload structure.
 *
 * @param {JwtPayload | string} obj - The decoded JWT payload or string.
 * @returns {obj is TokenPayload} - Returns true if the object matches the TokenPayload structure, otherwise false.
 */
function isTokenPayload(obj: JwtPayload | string): obj is TokenPayload {
  if (typeof obj === "object" && obj !== null) {
    const payload = obj as JwtPayload;
    return (
      "id" in payload &&
      "username" in payload &&
      "email" in payload &&
      "role" in payload
    );
  }
  return false;
}

export { generateToken, validateToken };